
module type QUEUE_FUN =
sig
 type 'a t
 exception Empty of string
 val empty: unit -> 'a t
 val enqueue: 'a * 'a t -> 'a t
 val dequeue: 'a t -> 'a t
 val first: 'a t -> 'a
 val isEmpty: 'a t -> bool
end;;

module Queue:QUEUE_FUN =
struct
  type 'a t = 'a list
    exception Empty of string
  let empty () = [] 
  let rec enqueue (x,queue)  = match queue with
                            | [] -> [x]
                            | h::t -> h::enqueue(x,t)
  let dequeue = function
    | [] -> []
    | _::t -> t

  let first = function
  | [] -> raise (Empty "error")
  | h::_ -> h
  
  let isEmpty queue = queue = []
end 
;;

module Queue2:QUEUE_FUN =
struct
  type 'a t = ('a list) * ('a list)
  exception Empty of string

  let empty () = ([],[])
  let enqueue (x,(xs,ys)) = if xs <> [] then (xs,x::ys) else (List.rev (x::ys),[])
  let dequeue (xs,ys) = 
    let help xss = match xss with 
                         | [] -> [] 
                         | _::t -> t in
    let res = help xs in
    if res = [] then (List.rev ys,[]) else (res,ys)
  
  let first (xs,_) = match xs with 
                      | [] -> raise (Empty "error")                       
                      | h::_ -> h
  let isEmpty queue = fst queue = []
  end
  ;;

  module type QUEUE_MUT =
sig
 type 'a t
 (* The type of queues containing elements of type ['a]. *)
 exception Empty of string
 (* Raised when [first q] is applied to an empty queue [q]. *)
 exception Full of string
 (* Raised when [enqueue(x,q)] is applied to a full queue [q]. *)
 val empty: int -> 'a t
 (* [empty n] returns a new queue of length [n], initially empty. *)
 val enqueue: 'a * 'a t -> unit
 (* [enqueue (x,q)] adds the element [x] at the end of a queue [q]. *)
 val dequeue: 'a t -> unit
 (* [dequeue q] removes the first element in queue [q] *)
 val first: 'a t -> 'a
 (* [first q] returns the first element in queue [q] without removing
 it from the queue, or raises [Empty] if the queue is empty. *)
 val isEmpty: 'a t -> bool
 (* [isEmpty q] returns [true] if queue [q] is empty,
 otherwise returns [false]. *)
 val isFull: 'a t -> bool
 (* [isFull q] returns [true] if queue [q] is full,
 otherwise returns [false]. *)
end;;

module MutQueue: QUEUE_MUT = 
struct
  type 'a t ={arr: 'a option array ; mutable f: int; mutable r: int}
  exception Empty of string
  exception Full of string
  let empty n = {arr = Array.make (n+1) None;f= 0;r = 0} 
  let incr q x = if x=((Array.length q.arr)-1) then 0 else x+1                
  let isFull queue = (incr queue queue.r) == (queue.f)  
  let enqueue (x, queue) = if (isFull queue) then raise (Full "error") else begin queue.arr.(queue.r) <- Some x ; queue.r <- (incr queue (queue.r)) end;;
  let dequeue queue = if queue.f <>queue.r then begin queue.arr.(queue.f) <- None; queue.f <- incr queue queue.f end;; 
  let first queue = let el = queue.arr.(queue.f) in 
                                            match el with 
                                            None -> raise (Empty "error")
                                            | Some(e) -> e
  let isEmpty queue = queue.arr.(queue.f) = None
end;; 


public class MyQueueImpl<E> implements MyQueue<E> {
    ArrayList<E> array;
    int r = 0;
    int f = 0;

    public MyQueueImpl(int n){
        array = new ArrayList<>(n+1);
        for (int i = 0; i <n ; i++) {
            array.add(null);
        }
    }

    @Override
    public void enqueue(E x) throws FullException {
        if (isFull()) throw new FullException();
        array.set(r,x);
        r = incr(r);
    }

    @Override
    public void dequeue() {
        if (!isEmpty()) {
            array.set(f, null);
            f = incr(f);
        }
    }

    private int incr(int n){
        if(n==array.size()-1){
            return 0;
        }else return n+1;
    }

    @Override
    public E first() throws EmptyException {
        if (isEmpty()) throw new EmptyException();
        return array.get(f);
    }

    @Override
    public boolean isEmpty() {
        return array.get(f) == null;
    }

    @Override
    public boolean isFull() {
        return incr(r)==f;
    }
}
